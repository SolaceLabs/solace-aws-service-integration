name: build

# Controls when the action will run. 
on:
  pull_request:

  push:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 50

    steps:
    - name: Set env
      run: |
        echo "AWS_DEFAULT_REGION=eu-west-1" >> $GITHUB_ENV
        echo "TEST_S3_BUCKET=solace-cf-quickstart-ghtest" >> $GITHUB_ENV
        echo "TEST_QSS3KEYPREFIX=pubsubplus-aws-service-integration" >> $GITHUB_ENV
        TESTSTACKPREFIX=T$(date +%s)
        echo "TESTSTACKPREFIX=$TESTSTACKPREFIX" >> $GITHUB_ENV
        echo "TESTSTACKNAMEBASE=$TESTSTACKPREFIX-ght" >> $GITHUB_ENV
        #
        sudo apt-get update -y; sudo apt-get install -y yamllint
        sudo apt-get install jq -y

    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Lint yaml templates
      run: |
        aws cloudformation validate-template --template-body file://templates/private_proxy_base.template
        aws cloudformation validate-template --template-body file://templates/private_proxy_base_and_simple_broker.template
        aws cloudformation validate-template --template-body file://templates/private_resource_integration.template
        aws cloudformation validate-template --template-body file://templates/public_resource_integration.template
        aws cloudformation validate-template --template-body file://templates/Security/private_proxy_securitygroup.template
        aws cloudformation validate-template --template-body file://templates/Security/private_proxy_vpcendpoint.template
        aws cloudformation validate-template --template-body file://templates/Security/proxy_iamrole.template
        aws cloudformation validate-template --template-body file://templates/Security/public_sample_proxy_lambdaauthorizer.template
        aws cloudformation validate-template --template-body file://templates/Services/resource_proxy_combined.template
        aws cloudformation validate-template --template-body file://templates/Solace/nodecreate.template
        aws cloudformation validate-template --template-body file://templates/SetupSampleEnvironment/setup_sample_aws_resources.template
        aws cloudformation validate-template --template-body file://templates/SetupSampleEnvironment/setup_sample_new_vpc_for_private_integration.template

    - name: Setup test buckets and name
      run: |
        aws s3 mb s3://$TEST_S3_BUCKET || echo "s3 bucket already existed"
        aws s3 sync . s3://$TEST_S3_BUCKET/$TEST_QSS3KEYPREFIX --acl public-read
        find ci/ -type f -exec sed -i -e 's/TEST_SOLACEDOCKERIMAGE/${{ secrets.BROKER_DOCKER_IMAGE_REF }}/g' {} \;
        find ci/ -type f -exec sed -i -e 's/TEST_QSS3BUCKETNAME/'$TEST_S3_BUCKET'/g' {} \;
        find ci/ -type f -exec sed -i -e 's@TEST_QSS3KEYPREFIX@'$TEST_QSS3KEYPREFIX'@g' {} \;
        aws s3api get-bucket-location --bucket $TEST_S3_BUCKET --output text
        find ci/ -type f -exec sed -i -e 's/TEST_QSS3BUCKETREGION/'`aws s3api get-bucket-location --bucket $TEST_S3_BUCKET --output text`'/g' {} \;

    - name: Create test VPC and AWS resources and setup all parameter files under "ci" directory
      run: |
        export VPCSTACKNAME="$TESTSTACKNAMEBASE-vpc"; echo "VPCSTACKNAME=$VPCSTACKNAME" >> $GITHUB_ENV
        aws cloudformation create-stack --stack-name $VPCSTACKNAME --template-body file://templates/SetupSampleEnvironment/setup_sample_new_vpc_for_private_integration.template  --on-failure DELETE --capabilities  CAPABILITY_NAMED_IAM
        export RESOURCESSTACKNAME="$TESTSTACKNAMEBASE-res"; echo "RESOURCESSTACKNAME=$RESOURCESSTACKNAME" >> $GITHUB_ENV
        aws cloudformation create-stack --stack-name $RESOURCESSTACKNAME --template-body file://templates/SetupSampleEnvironment/setup_sample_aws_resources.template  --on-failure DELETE --capabilities  CAPABILITY_NAMED_IAM
        echo "Waiting for stack create complete"
        until aws cloudformation describe-stacks --stack-name $RESOURCESSTACKNAME | grep -m 1 -E 'CREATE_COMPLETE|DELETE_IN_PROGRESS|CREATE_FAILED'; do sleep 10; done
        TEST_SNSTOPIC=`aws cloudformation describe-stacks --stack-name $RESOURCESSTACKNAME --query "Stacks[0].Outputs[?OutputKey=='TestSnsTopic'].OutputValue" --output text`; echo TEST_SNSTOPIC=$TEST_SNSTOPIC
        find ci/ -type f -exec sed -i -e 's/TEST_SNSTOPIC/'$TEST_SNSTOPIC'/g' {} \;
        TEST_SQSQUEUE=`aws cloudformation describe-stacks --stack-name $RESOURCESSTACKNAME --query "Stacks[0].Outputs[?OutputKey=='TestSqsQueue'].OutputValue" --output text`; echo TEST_SQSQUEUE=$TEST_SQSQUEUE
        find ci/ -type f -exec sed -i -e 's/TEST_SQSQUEUE/'$TEST_SQSQUEUE'/g' {} \;
        TEST_S3BUCKET=`aws cloudformation describe-stacks --stack-name $RESOURCESSTACKNAME --query "Stacks[0].Outputs[?OutputKey=='TestS3Bucket'].OutputValue" --output text`; echo TEST_S3BUCKET=$TEST_S3BUCKET
        find ci/ -type f -exec sed -i -e 's/TEST_S3BUCKET/'$TEST_S3BUCKET'/g' {} \;
        TEST_LAMBDA=`aws cloudformation describe-stacks --stack-name $RESOURCESSTACKNAME --query "Stacks[0].Outputs[?OutputKey=='TestLambda'].OutputValue" --output text`; echo TEST_LAMBDA=$TEST_LAMBDA
        find ci/ -type f -exec sed -i -e 's/TEST_LAMBDA/'$TEST_LAMBDA'/g' {} \;
        until aws cloudformation describe-stacks --stack-name $VPCSTACKNAME | grep -m 1 -E 'CREATE_COMPLETE|DELETE_IN_PROGRESS|CREATE_FAILED'; do sleep 10; done
        TEST_VPC=`aws cloudformation describe-stacks --stack-name $VPCSTACKNAME --query "Stacks[0].Outputs[?OutputKey=='VPC'].OutputValue" --output text`; echo TEST_VPC=$TEST_VPC
        find ci/ -type f -exec sed -i -e 's/TEST_VPC/'$TEST_VPC'/g' {} \;
        TEST_SUBNET=`aws cloudformation describe-stacks --stack-name $VPCSTACKNAME --query "Stacks[0].Outputs[?OutputKey=='Subnet'].OutputValue" --output text`; echo TEST_SUBNET=$TEST_SUBNET
        find ci/ -type f -exec sed -i -e 's/TEST_SUBNET/'$TEST_SUBNET'/g' {} \;
        TEST_SECURITYGROUP=`aws cloudformation describe-stacks --stack-name $VPCSTACKNAME --query "Stacks[0].Outputs[?OutputKey=='SecurityGroup'].OutputValue" --output text`; echo TEST_SECURITYGROUP=$TEST_SECURITYGROUP
        find ci/ -type f -exec sed -i -e 's/TEST_SECURITYGROUP/'$TEST_SECURITYGROUP'/g' {} \;
        TEST_AUTHHEADER_NAME=TtestHeader
        find ci/ -type f -exec sed -i -e 's/TEST_AUTHHEADER_NAME/'$TEST_AUTHHEADER_NAME'/g' {} \;
        TEST_AUTHHEADER_VALUE=MyToken
        find ci/ -type f -exec sed -i -e 's/TEST_AUTHHEADER_VALUE/'$TEST_AUTHHEADER_VALUE'/g' {} \;

    - name: Setup private integration base with broker
      run: |
        export PRIV_INT_BASE_BROKER_STACKNAME="$TESTSTACKNAMEBASE-base-broker"; echo "PRIV_INT_BASE_BROKER_STACKNAME=$PRIV_INT_BASE_BROKER_STACKNAME" >> $GITHUB_ENV
        aws cloudformation create-stack --stack-name $PRIV_INT_BASE_BROKER_STACKNAME --template-body file://templates/private_proxy_base_and_simple_broker.template --parameters file://ci/private_proxy_base_and_simple_broker_test.json --on-failure DO_NOTHING --capabilities CAPABILITY_NAMED_IAM

    - name: Create private SQS, SNS, Lambda and S3 integrations and test them
      run: |
        export PRIV_INT_SQS_STACKNAME="$TESTSTACKNAMEBASE-priv-sqs"; echo "PRIV_INT_SQS_STACKNAME=$PRIV_INT_SQS_STACKNAME" >> $GITHUB_ENV
        aws cloudformation create-stack --stack-name $PRIV_INT_SQS_STACKNAME --template-body file://templates/private_resource_integration.template --parameters file://ci/private_sqs_integration_test.json --on-failure DO_NOTHING --capabilities CAPABILITY_NAMED_IAM
        export PRIV_INT_SNS_STACKNAME="$TESTSTACKNAMEBASE-priv-sns"; echo "PRIV_INT_SNS_STACKNAME=$PRIV_INT_SNS_STACKNAME" >> $GITHUB_ENV
        aws cloudformation create-stack --stack-name $PRIV_INT_SNS_STACKNAME --template-body file://templates/private_resource_integration.template --parameters file://ci/private_sns_integration_test.json --on-failure DO_NOTHING --capabilities CAPABILITY_NAMED_IAM
        export PRIV_INT_LAMBDA_STACKNAME="$TESTSTACKNAMEBASE-priv-lambda"; echo "PRIV_INT_LAMBDA_STACKNAME=$PRIV_INT_LAMBDA_STACKNAME" >> $GITHUB_ENV
        aws cloudformation create-stack --stack-name $PRIV_INT_LAMBDA_STACKNAME --template-body file://templates/private_resource_integration.template --parameters file://ci/private_lambda_integration_test.json --on-failure DO_NOTHING --capabilities CAPABILITY_NAMED_IAM
        export PRIV_INT_S3_STACKNAME="$TESTSTACKNAMEBASE-priv-s3"; echo "PRIV_INT_S3_STACKNAME=$PRIV_INT_S3_STACKNAME" >> $GITHUB_ENV
        aws cloudformation create-stack --stack-name $PRIV_INT_S3_STACKNAME --template-body file://templates/private_resource_integration.template --parameters file://ci/private_s3_integration_test.json --on-failure DO_NOTHING --capabilities CAPABILITY_NAMED_IAM

    - name: Wait for all stacks to come up and extract results then finalize integrations by setting up RDPs
      run: |
        until aws cloudformation describe-stacks --stack-name $PRIV_INT_SQS_STACKNAME | grep -m 1 -E 'CREATE_COMPLETE|DELETE_IN_PROGRESS|CREATE_FAILED'; do sleep 10; done
        #
        PRIV_SQS_PROXYAPISENDURL=`aws cloudformation describe-stacks --stack-name $PRIV_INT_SQS_STACKNAME --query "Stacks[0].Outputs[?OutputKey=='ProxyAPISendUrl'].OutputValue" --output text`; echo PRIV_SQS_PROXYAPISENDURL=$PRIV_SQS_PROXYAPISENDURL
        PRIV_SQS_PROXYAPIRECEIVEURL=`aws cloudformation describe-stacks --stack-name $PRIV_INT_SQS_STACKNAME --query "Stacks[0].Outputs[?OutputKey=='ProxyAPIReceiveUrl'].OutputValue" --output text`; echo PRIV_SQS_PROXYAPIRECEIVEURL=$PRIV_SQS_PROXYAPIRECEIVEURL
        PRIV_SQS_PROXYAPIDELETEURL=`aws cloudformation describe-stacks --stack-name $PRIV_INT_SQS_STACKNAME --query "Stacks[0].Outputs[?OutputKey=='ProxyAPIDeleteUrl'].OutputValue" --output text`; echo PRIV_SQS_PROXYAPIDELETEURL=$PRIV_SQS_PROXYAPIDELETEURL
        until aws cloudformation describe-stacks --stack-name $PRIV_INT_SNS_STACKNAME | grep -m 1 -E 'CREATE_COMPLETE|DELETE_IN_PROGRESS|CREATE_FAILED'; do sleep 10; done
        PRIV_SNS_PROXYAPISENDURL=`aws cloudformation describe-stacks --stack-name $PRIV_INT_SNS_STACKNAME --query "Stacks[0].Outputs[?OutputKey=='ProxyAPISendUrl'].OutputValue" --output text`; echo PRIV_SNS_PROXYAPISENDURL=$PRIV_SNS_PROXYAPISENDURL
        until aws cloudformation describe-stacks --stack-name $PRIV_INT_LAMBDA_STACKNAME | grep -m 1 -E 'CREATE_COMPLETE|DELETE_IN_PROGRESS|CREATE_FAILED'; do sleep 10; done
        PRIV_LAMBDA_PROXYAPISENDURL=`aws cloudformation describe-stacks --stack-name $PRIV_INT_LAMBDA_STACKNAME --query "Stacks[0].Outputs[?OutputKey=='ProxyAPISendUrl'].OutputValue" --output text`; echo PRIV_LAMBDA_PROXYAPISENDURL=$PRIV_LAMBDA_PROXYAPISENDURL
        until aws cloudformation describe-stacks --stack-name $PRIV_INT_S3_STACKNAME | grep -m 1 -E 'CREATE_COMPLETE|DELETE_IN_PROGRESS|CREATE_FAILED'; do sleep 10; done
        PRIV_S3_PROXYAPISENDURL=`aws cloudformation describe-stacks --stack-name $PRIV_INT_S3_STACKNAME --query "Stacks[0].Outputs[?OutputKey=='ProxyAPISendUrl'].OutputValue" --output text`; echo PRIV_S3_PROXYAPISENDURL=$PRIV_S3_PROXYAPISENDURL
        until aws cloudformation describe-stacks --stack-name $PRIV_INT_BASE_BROKER_STACKNAME | grep -m 1 -E 'CREATE_COMPLETE|DELETE_IN_PROGRESS|CREATE_FAILED'; do sleep 10; done
        #
        BROKER_URL=`aws cloudformation describe-stacks --stack-name $PRIV_INT_BASE_BROKER_STACKNAME --query "Stacks[0].Outputs[?OutputKey=='BrokerPublicDNSName'].OutputValue" --output text`; echo BROKER_URL=$BROKER_URL
        echo "BROKER_URL=$BROKER_URL" >> $GITHUB_ENV
        #
        until curl http://$BROKER_URL:8080; do sleep 10; done; sleep 5 # Wait for SEMP API to come up
        #
        chmod +x ./scripts/setup-rdp.sh
        INTEGRATION_NAME=priv-sqs INTEGRATION_API_URL=$PRIV_SQS_PROXYAPISENDURL BROKER_SEMP_URL=http://$BROKER_URL:8080 ADMIN_PASSWORD=admin ./scripts/setup-rdp.sh 
        INTEGRATION_NAME=priv-sqs INTEGRATION_API_URL=$PRIV_SQS_PROXYAPIRECEIVEURL BROKER_SEMP_URL=http://$BROKER_URL:8080 ADMIN_PASSWORD=admin ./scripts/setup-rdp.sh 
        INTEGRATION_NAME=priv-sqs INTEGRATION_API_URL=$PRIV_SQS_PROXYAPIDELETEURL BROKER_SEMP_URL=http://$BROKER_URL:8080 ADMIN_PASSWORD=admin ./scripts/setup-rdp.sh 
        INTEGRATION_NAME=priv-sns INTEGRATION_API_URL=$PRIV_SNS_PROXYAPISENDURL BROKER_SEMP_URL=http://$BROKER_URL:8080 ADMIN_PASSWORD=admin ./scripts/setup-rdp.sh 
        INTEGRATION_NAME=priv-lambda INTEGRATION_API_URL=$PRIV_LAMBDA_PROXYAPISENDURL BROKER_SEMP_URL=http://$BROKER_URL:8080 ADMIN_PASSWORD=admin ./scripts/setup-rdp.sh 
        INTEGRATION_NAME=priv-s3 INTEGRATION_API_URL=$PRIV_S3_PROXYAPISENDURL BROKER_SEMP_URL=http://$BROKER_URL:8080 ADMIN_PASSWORD=admin ./scripts/setup-rdp.sh

    - name:  Get sdkperf first to later test the integration
      run: |
        curl -O https://sftp.solace.com/download/SDKPERF_C_LINUX64
        tar -xvf SDKPERF_C_LINUX64

    - name: SQS - send message to broker queue subscribed topic and read it back from SQS, then delete it
      run: |
        echo "Testmessage" > contents.txt; pubSubTools/sdkperf_c -cip="${BROKER_URL}" -ptl=solace-aws-service-integration_priv-sqs/send -mr=1 -mn=1 -md -pal=contents.txt
        TEST_SQSQUEUE_URL=$(aws sqs get-queue-url --queue-name ${TEST_SQSQUEUE##*:} --endpoint-url https://sqs.${AWS_DEFAULT_REGION}.amazonaws.com --output text)
        aws sqs receive-message --queue-url $TEST_SQSQUEUE_URL --attribute-names All --message-attribute-names All --output json > result.txt
        grep "Testmessage" result.txt
        handle=$(cat result.txt | jq '.Messages[].ReceiptHandle' | xargs); echo $handle; aws sqs delete-message --queue-url $TEST_SQSQUEUE_URL --receipt-handle $handle

    - name: Create public SQS, SNS, Lambda and S3 integrations and test them
      run: |
        export PUB_INT_SQS_STACKNAME="$TESTSTACKNAMEBASE-pub-sqs"; echo "PUB_INT_SQS_STACKNAME=$PUB_INT_SQS_STACKNAME" >> $GITHUB_ENV
        aws cloudformation create-stack --stack-name $PUB_INT_SQS_STACKNAME --template-body file://templates/public_resource_integration.template --parameters file://ci/public_sqs_integration_test.json --on-failure DO_NOTHING --capabilities CAPABILITY_NAMED_IAM
        export PUB_INT_SNS_STACKNAME="$TESTSTACKNAMEBASE-pub-sns"; echo "PUB_INT_SNS_STACKNAME=$PUB_INT_SNS_STACKNAME" >> $GITHUB_ENV
        aws cloudformation create-stack --stack-name $PUB_INT_SNS_STACKNAME --template-body file://templates/public_resource_integration.template --parameters file://ci/public_sns_integration_test.json --on-failure DO_NOTHING --capabilities CAPABILITY_NAMED_IAM
        export PUB_INT_LAMBDA_STACKNAME="$TESTSTACKNAMEBASE-pub-lambda"; echo "PUB_INT_LAMBDA_STACKNAME=$PUB_INT_LAMBDA_STACKNAME" >> $GITHUB_ENV
        aws cloudformation create-stack --stack-name $PUB_INT_LAMBDA_STACKNAME --template-body file://templates/public_resource_integration.template --parameters file://ci/public_lambda_integration_test.json --on-failure DO_NOTHING --capabilities CAPABILITY_NAMED_IAM
        export PUB_INT_S3_STACKNAME="$TESTSTACKNAMEBASE-pub-s3"; echo "PUB_INT_S3_STACKNAME=$PUB_INT_S3_STACKNAME" >> $GITHUB_ENV
        aws cloudformation create-stack --stack-name $PUB_INT_S3_STACKNAME --template-body file://templates/public_resource_integration.template --parameters file://ci/public_s3_integration_test.json --on-failure DO_NOTHING --capabilities CAPABILITY_NAMED_IAM

    - name: Wait for all stacks to come up and extract results
      run: |
        until aws cloudformation describe-stacks --stack-name $PUB_INT_SQS_STACKNAME | grep -m 1 -E 'CREATE_COMPLETE|DELETE_IN_PROGRESS|CREATE_FAILED'; do sleep 10; done
        PUB_SQS_PROXYAPISENDURL=`aws cloudformation describe-stacks --stack-name $PUB_INT_SQS_STACKNAME --query "Stacks[0].Outputs[?OutputKey=='ProxyAPISendUrl'].OutputValue" --output text`; echo PUB_SQS_PROXYAPISENDURL=$PUB_SQS_PROXYAPISENDURL
        PUB_SQS_PROXYAPIRECEIVEURL=`aws cloudformation describe-stacks --stack-name $PUB_INT_SQS_STACKNAME --query "Stacks[0].Outputs[?OutputKey=='ProxyAPIReceiveUrl'].OutputValue" --output text`; echo PUB_SQS_PROXYAPIRECEIVEURL=$PUB_SQS_PROXYAPIRECEIVEURL
        PUB_SQS_PROXYAPIDELETEURL=`aws cloudformation describe-stacks --stack-name $PUB_INT_SQS_STACKNAME --query "Stacks[0].Outputs[?OutputKey=='ProxyAPIDeleteUrl'].OutputValue" --output text`; echo PUB_SQS_PROXYAPIDELETEURL=$PUB_SQS_PROXYAPIDELETEURL
        until aws cloudformation describe-stacks --stack-name $PUB_INT_SNS_STACKNAME | grep -m 1 -E 'CREATE_COMPLETE|DELETE_IN_PROGRESS|CREATE_FAILED'; do sleep 10; done
        PUB_SNS_PROXYAPISENDURL=`aws cloudformation describe-stacks --stack-name $PUB_INT_SNS_STACKNAME --query "Stacks[0].Outputs[?OutputKey=='ProxyAPISendUrl'].OutputValue" --output text`; echo PUB_SNS_PROXYAPISENDURL=$PUB_SNS_PROXYAPISENDURL
        until aws cloudformation describe-stacks --stack-name $PUB_INT_LAMBDA_STACKNAME | grep -m 1 -E 'CREATE_COMPLETE|DELETE_IN_PROGRESS|CREATE_FAILED'; do sleep 10; done
        PUB_LAMBDA_PROXYAPISENDURL=`aws cloudformation describe-stacks --stack-name $PUB_INT_LAMBDA_STACKNAME --query "Stacks[0].Outputs[?OutputKey=='ProxyAPISendUrl'].OutputValue" --output text`; echo PUB_LAMBDA_PROXYAPISENDURL=$PUB_LAMBDA_PROXYAPISENDURL
        until aws cloudformation describe-stacks --stack-name $PUB_INT_S3_STACKNAME | grep -m 1 -E 'CREATE_COMPLETE|DELETE_IN_PROGRESS|CREATE_FAILED'; do sleep 10; done
        PUB_S3_PROXYAPISENDURL=`aws cloudformation describe-stacks --stack-name $PUB_INT_S3_STACKNAME --query "Stacks[0].Outputs[?OutputKey=='ProxyAPISendUrl'].OutputValue" --output text`; echo PUB_S3_PROXYAPISENDURL=$PUB_S3_PROXYAPISENDURL
        #
        # Finalize integrations by setting up RDPs
        INTEGRATION_NAME=pub-sqs INTEGRATION_API_URL=$PUB_SQS_PROXYAPISENDURL BROKER_SEMP_URL=http://$BROKER_URL:8080 ADMIN_PASSWORD=admin HTTP_AUTH_HEADER_NAME=$TEST_AUTHHEADER_NAME HTTP_AUTH_TOKEN_VALUE=$TEST_AUTHHEADER_VALUE ./scripts/setup-rdp.sh
        INTEGRATION_NAME=pub-sqs INTEGRATION_API_URL=$PUB_SQS_PROXYAPIRECEIVEURL BROKER_SEMP_URL=http://$BROKER_URL:8080 ADMIN_PASSWORD=admin  HTTP_AUTH_HEADER_NAME=$TEST_AUTHHEADER_NAME HTTP_AUTH_TOKEN_VALUE=$TEST_AUTHHEADER_VALUE ./scripts/setup-rdp.sh 
        INTEGRATION_NAME=pub-sqs INTEGRATION_API_URL=$PUB_SQS_PROXYAPIDELETEURL BROKER_SEMP_URL=http://$BROKER_URL:8080 ADMIN_PASSWORD=admin  HTTP_AUTH_HEADER_NAME=$TEST_AUTHHEADER_NAME HTTP_AUTH_TOKEN_VALUE=$TEST_AUTHHEADER_VALUE ./scripts/setup-rdp.sh 
        INTEGRATION_NAME=pub-sns INTEGRATION_API_URL=$PUB_SNS_PROXYAPISENDURL BROKER_SEMP_URL=http://$BROKER_URL:8080 ADMIN_PASSWORD=admin  HTTP_AUTH_HEADER_NAME=$TEST_AUTHHEADER_NAME HTTP_AUTH_TOKEN_VALUE=$TEST_AUTHHEADER_VALUE ./scripts/setup-rdp.sh 
        INTEGRATION_NAME=pub-lambda INTEGRATION_API_URL=$PUB_LAMBDA_PROXYAPISENDURL BROKER_SEMP_URL=http://$BROKER_URL:8080 ADMIN_PASSWORD=admin  HTTP_AUTH_HEADER_NAME=$TEST_AUTHHEADER_NAME HTTP_AUTH_TOKEN_VALUE=$TEST_AUTHHEADER_VALUE ./scripts/setup-rdp.sh 
        INTEGRATION_NAME=pub-s3 INTEGRATION_API_URL=$PUB_S3_PROXYAPISENDURL BROKER_SEMP_URL=http://$BROKER_URL:8080 ADMIN_PASSWORD=admin  HTTP_AUTH_HEADER_NAME=$TEST_AUTHHEADER_NAME HTTP_AUTH_TOKEN_VALUE=$TEST_AUTHHEADER_VALUE ./scripts/setup-rdp.sh
        #
        # SQS - send message to broker queue subscribed topic and read it back from SQS, then delete it
        echo "Testmessage2" > contents.txt; pubSubTools/sdkperf_c -cip="${BROKER_URL}" -ptl=solace-aws-service-integration_priv-sqs/send -mr=1 -mn=1 -md -pal=contents.txt
        TEST_SQSQUEUE_URL=$(aws sqs get-queue-url --queue-name ${TEST_SQSQUEUE##*:} --endpoint-url https://sqs.${AWS_DEFAULT_REGION}.amazonaws.com --output text)
        aws sqs receive-message --queue-url $TEST_SQSQUEUE_URL --attribute-names All --message-attribute-names All --output json > result.txt
        grep "Testmessage2" result.txt
        handle=$(cat result.txt | jq '.Messages[].ReceiptHandle' | xargs); echo $handle; aws sqs delete-message --queue-url $TEST_SQSQUEUE_URL --receipt-handle $handle

    - name: Delete test deployment (Cleanup)
      if: ${{ always() }}
      run: |
        aws cloudformation delete-stack --stack-name $VPCSTACKNAME
        aws cloudformation delete-stack --stack-name $RESOURCESSTACKNAME
        aws cloudformation delete-stack --stack-name $PRIV_INT_BASE_BROKER_STACKNAME
        aws cloudformation delete-stack --stack-name $PRIV_INT_SQS_STACKNAME
        aws cloudformation delete-stack --stack-name $PRIV_INT_SNS_STACKNAME
        aws cloudformation delete-stack --stack-name $PRIV_INT_LAMBDA_STACKNAME
        aws cloudformation delete-stack --stack-name $PRIV_INT_S3_STACKNAME
        aws cloudformation delete-stack --stack-name $PUB_INT_SQS_STACKNAME
        aws cloudformation delete-stack --stack-name $PUB_INT_SNS_STACKNAME
        aws cloudformation delete-stack --stack-name $PUB_INT_LAMBDA_STACKNAME
        aws cloudformation delete-stack --stack-name $PUB_INT_S3_STACKNAME
        echo "Waiting for stack delete complete (only watching slowest delete)"
        stackid="$(aws cloudformation describe-stacks --stack-name $VPCSTACKNAME | grep StackId | awk -F '"' '{print $4}')"
        stackid2="$(aws cloudformation describe-stacks --stack-name $PRIV_INT_BASE_BROKER_STACKNAME | grep StackId | awk -F '"' '{print $4}')"
        if [ -n "$stackid" ]; then until aws cloudformation describe-stacks --stack-name $stackid | grep -m 1 "DELETE_COMPLETE"; do sleep 10; done; fi
        if [ -n "$stackid2" ]; then until aws cloudformation describe-stacks --stack-name $stackid2 | grep -m 1 "DELETE_COMPLETE"; do sleep 10; done; fi

