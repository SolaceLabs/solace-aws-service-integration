language: python 
python: 
  - "2.7" 

env:
  global:
  - AWS_DEFAULT_REGION=us-east-1
  - NODE_INSTANCE_TYPE=t2.xlarge
  - TRAVIS_S3_BUCKET=solace-travis-test
  - TRAVIS_S3_PREFIX=solace-aws-service-integration
  
before_install:
  - echo "Installing AWS CLI"
  - pip install --upgrade awscli
  - pip install --upgrade jq
  - echo "Installing test gems"
  - sudo apt-get install build-essential 
  - ruby -v 
  - gem install yaml-lint

install: true

script:
  - if [ "$TEST_RESOURCE_TYPE" = "SQS" ]; then export TRAVIS_TEST_FILE=ci/travis-test-sqs.json; fi
  - if [ "$TEST_RESOURCE_TYPE" = "Lambda" ]; then export TRAVIS_TEST_FILE=ci/travis-test-lambda.json; fi
  - aws cloudformation validate-template --template-body file://templates/api_proxy.template
  - aws cloudformation validate-template --template-body file://templates/Security/proxy_endpoint.template
  - aws cloudformation validate-template --template-body file://templates/Security/proxy_role.template
  - aws cloudformation validate-template --template-body file://templates/Security/proxy_securityGroup.template
  - aws cloudformation validate-template --template-body file://templates/Services/kinesis_proxy.template
  - aws cloudformation validate-template --template-body file://templates/Services/resource_proxy.template
  - aws cloudformation validate-template --template-body file://templates/Services/s3_proxy.template
  - aws cloudformation validate-template --template-body file://templates/Solace/node_create.template
  - yaml-lint -n templates/
  - yaml-lint -n templates/Services
  - yaml-lint -n templates/Security
  - yaml-lint -n templates/Solace
  - sed -i "s@SOLOS_PASSWORD@$SOLOS_PASSWORD@g" $TRAVIS_TEST_FILE
  - sed -i "s@TEST_KEYPAIR@$TEST_KEYPAIR@g" $TRAVIS_TEST_FILE
  - sed -i "s@NODE_INSTANCE_TYPE@$NODE_INSTANCE_TYPE@g" $TRAVIS_TEST_FILE
  - sed -i "s@SQS_ARN@$SQS_ARN@g" $TRAVIS_TEST_FILE
  - sed -i "s@LAMBDA_ARN@$LAMBDA_ARN@g" $TRAVIS_TEST_FILE
  - sed -i "s@TEST_RESOURCE_TYPE@$TEST_RESOURCE_TYPE@g" $TRAVIS_TEST_FILE
  - sed -i "s@TEST_SECURITY_GROUP_ID@$TEST_SECURITY_GROUP_ID@g" $TRAVIS_TEST_FILE
  - sed -i "s@TEST_SUBNET_ID@$TEST_SUBNET_ID@g" $TRAVIS_TEST_FILE
  - sed -i "s@TEST_VPC_ID@$TEST_VPC_ID@g" $TRAVIS_TEST_FILE
  - sed -i "s@TRAVIS_S3_BUCKET@$TRAVIS_S3_BUCKET@g" $TRAVIS_TEST_FILE
  - sed -i "s@TRAVIS_S3_PREFIX@$TRAVIS_S3_PREFIX@g" $TRAVIS_TEST_FILE
  - aws s3 mb s3://$TRAVIS_S3_BUCKET || echo "s3 bucket already existed"
  - aws s3 sync . s3://$TRAVIS_S3_BUCKET/$TRAVIS_S3_PREFIX --acl public-read
  - export TESTSTACKPREFIX="T$(date +%s)"; export TESTSTACKNAME="$TESTSTACKPREFIX-travis";
  - aws cloudformation create-stack --stack-name $TESTSTACKNAME --template-body file://templates/api_proxy+vmr.template --parameters file://$TRAVIS_TEST_FILE  --on-failure DELETE --capabilities  CAPABILITY_NAMED_IAM
  - echo "Waiting for stack create complete"
  - "travis_wait 30 sleep 1800 &"
  - until aws cloudformation describe-stacks --stack-name $TESTSTACKNAME | grep -m 1 -E 'CREATE_COMPLETE|DELETE_IN_PROGRESS|CREATE_FAILED'; do sleep 10; done
  - aws cloudformation describe-stack-events --stack-name $TESTSTACKNAME
  - aws cloudformation describe-stacks --stack-name $TESTSTACKNAME
  - solaceStackName="$(aws cloudformation describe-stack-resource --stack-name $TESTSTACKNAME --logical-resource-id  SolaceStack | grep -oE "$TESTSTACKNAME-SolaceStack-[0-9A-Z]*")"
  - solaceStackJson="$(aws cloudformation describe-stack-resource --stack-name $solaceStackName  --logical-resource-id NodeLaunchConfig)"
  - instanceId="$(jq '.StackResourceDetail.PhysicalResourceId' <<< $solaceStackJson)"
  - instanceInfo="$(aws ec2 describe-instances --region us-east-1 --instance-ids ${instanceId//\"} )"
  - publicIp="$(jq '.Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicIp' <<< $instanceInfo)"
  - publicIp=${publicIp//\"}
  - echo "PublicIp=**${publicIp}**"
  - ping -c 5 $publicIp
  - health_check="000"
  - while [ $health_check -ne 200 ]; do health_check="$(curl -s -o /dev/null -w "%{http_code}"  http://${publicIp}:5550/health-check/guaranteed-active)"; sleep 10; echo "`date` Health=${health_check}"; done
  - curl -O https://sftp.solace.com/download/SDKPERF_C_LINUX64
  - tar -xvf SDKPERF_C_LINUX64

  - |
    if [ "$TEST_RESOURCE_TYPE" = "SQS" ]; then
      pubSubTools/sdkperf_c -cip="${publicIp}" -ptl=solace-aws-service-integration/send -mr=1 -mn=1 -msa=10 -md
      pubSubTools/sdkperf_c -cip="${publicIp}" -stl=solace-aws-service-integration/receive/reply -ptl=solace-aws-service-integration/receive -prp=/reply -mr=1 -mn=1 -md > result.txt
      csplit result.txt '/^^^^^^^^^^^^^^^^^^^/' '{*}'
      mv xx01 result_msg_hex.txt
      tail -n +8 result_msg_hex.txt > result_msg_hex_trimmed.txt
      cut -c 56- result_msg_hex_trimmed.txt > result_msg_ws.txt
      tr -d ' \t\n\r\f' <result_msg_ws.txt >result_msg.txt
      jq . result_msg.txt
      receiptHandle=`jq ."ReceiveMessageResponse.ReceiveMessageResult.messages[].ReceiptHandle" result_msg.txt`
      receiptHandle=${receiptHandle//\"}
      echo ${receiptHandle} > receiptHandle.txt
      pubSubTools/sdkperf_c -cip="${publicIp}" -ptl=solace-aws-service-integration/delete -pal=receiptHandle.txt -mr=1 -mn=1 -md
    elif  [ "$TEST_RESOURCE_TYPE" = "Lambda" ]; then
      echo "{\"a\":1,\"b\":2,\"op\":\"+\"}" > request.file
      pubSubTools/sdkperf_c -cip="${publicIp}" -pal=request.file -stl=solace-aws-service-integration/send/reply -ptl=solace-aws-service-integration/send -prp=/reply -mr=1 -mn=1 -md
    fi

after_success:
  - echo "Test Success - Branch($TRAVIS_BRANCH) Pull Request($TRAVIS_PULL_REQUEST) Tag($TRAVIS_TAG)"
  - echo "Cloudformation templates validated"
  - echo "YAML linted"
  - echo "Cloudformation tested"
  - echo "Messaging tested"
  - if [ "$TRAVIS_BRANCH" = "master" ]; then aws s3 sync . s3://solace-labs/$TRAVIS_S3_PREFIX --acl public-read; fi

after_script:
  - aws s3 rb s3://$TRAVIS_S3_BUCKET --force
  - aws cloudformation delete-stack --stack-name $TESTSTACKNAME
  - echo "Waiting for stack delete complete"
  - stackid="$(aws cloudformation describe-stacks --stack-name $TESTSTACKNAME | grep StackId | awk -F '"' '{print $4}')"
  - if [ -n "$stackid" ]; then until aws cloudformation describe-stacks --stack-name $stackid | grep -m 1 "DELETE_COMPLETE"; do sleep 10; done; fi