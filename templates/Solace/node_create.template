{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CloudFormation sub-template for Single Node EC2 deployment within Solace HA Cluster",
    "Parameters": {
        "AdminPassword": {
            "Description": "Required password to access SolOS admin console and SEMP",
            "Type": "String"
        },
        "ApiGatewayId": {
            "Description": "ID for the attached API gateway",
            "Type": "String"
        },
        "BootDiskSize": {
            "ConstraintDescription": "Deployment supports 8 to 128 GB for boot volumes",
            "Default": "24",
            "Description": "Allocated EBS storage for boot disk",
            "MaxValue": "128",
            "MinValue": "8",
            "Type": "Number"
        },
        "KeyPairName": {
            "Description": "Name of an existing EC2 key pair within the AWS region; all instances will launch with this key pair",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "NodeInstanceType": {
            "ConstraintDescription": "Must be a valid EC2 instance type.",
            "Default": "t2.large",
            "Description": "Instance Type for Kafka brokers; select m3/m4 or i2 instance types for us-west-1 and sa-east-1",
            "Type": "String"
        },
        "NodeSecurityGroup": {
            "Description": "Comma separated list of security groups for the members of the cluster (e.g. sg-7f16e910,sg-4be93ca2); The security groups must be in the same VPC as the subnets",
            "Type": "List<AWS::EC2::SecurityGroup::Id>"
        },
        "ParentStackName": {
            "Description": "Wrapper stack for this deployment",
            "Default": "sol-aws-service-integration",
            "Type": "String"
        },
        "PersistentStorage": {
            "ConstraintDescription": "No more than 1024 GB per device (4 TB per node).",
            "Default": "0",
            "Description": "Allocated EBS storage for each block device (in GB; 4 devs per node); 0 indicates ephemeral storage only",
            "AllowedValues": [
                "0",
                "20",
                "40",
                "80",
                "160",
                "320",
                "640"
            ],
            "Type": "Number"
        },
        "SubnetID": {
            "Description": "Comma separated list of VPC subnet IDs for the cluster deployment (e.g. subnet-4b8d329f,subnet-bd73afc8); VPC must exist with proper configuration for Solacet cluster access (internal and external)and the subnets must be in the same VPC as the security groups",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "solace-labs",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "solace-aws-service-integration/latest",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "AMZNLINUXHVM": "amzn-ami-hvm-2017.09.1.20180117-x86_64"
            },
            "ap-northeast-1": {
                "AMZNLINUXHVM": "ami-ceafcba8"
            },
            "ap-northeast-2": {
                "AMZNLINUXHVM": "ami-942dd1f6"
            },
            "ap-south-1": {
                "AMZNLINUXHVM": "ami-531a4c3c"
            },
            "ap-southeast-1": {
                "AMZNLINUXHVM": "ami-68097514"
            },
            "ap-southeast-2": {
                "AMZNLINUXHVM": "ami-942dd1f6"
            },
            "ca-central-1": {
                "AMZNLINUXHVM": "ami-a954d1cd"
            },
            "cn-north-1": {
                "AMZNLINUXHVM": "ami-cb19c4a6"
            },
            "eu-west-1": {
                "AMZNLINUXHVM": "ami-d834aba1"
            },
            "eu-west-2": {
                "AMZNLINUXHVM": "ami-403e2524"
            },
            "eu-central-1": {
                "AMZNLINUXHVM": "ami-5652ce39"
            },
            "sa-east-1": {
                "AMZNLINUXHVM": "ami-84175ae8"
            },
            "us-east-1": {
                "AMZNLINUXHVM": "ami-97785bed"
            },
            "us-east-2": {
                "AMZNLINUXHVM": "ami-f63b1193"
            },
            "us-west-1": {
                "AMZNLINUXHVM": "ami-824c4ee2"
            },
            "us-west-2": {
                "AMZNLINUXHVM": "ami-f2d3638a"
            }
        },
        "LinuxAMINameMap": {
            "Amazon-Linux-HVM": {
                "Code": "AMZNLINUXHVM"
            }
        },
        "Linux2BootDisk": {
            "Amazon-Linux-HVM": {
                "BootDisk": "/dev/xvda"
            }
        },
        "Linux2SpoolDisk": {
            "Amazon-Linux-HVM": {
                "SpoolDisk": "/dev/xvdb"
            }
        },
        "IOPsMap": {
            "0": {
                "IOPs" : "0"
            },
            "20": {
                "IOPs" : "1000"
            },
            "40": {
                "IOPs" : "2000"
            },
            "80": {
                "IOPs": "4000"
            },
            "160": {
                "IOPs": "8000"
            },
            "320": {
                "IOPs": "16000"
            },
            "640": {
                "IOPs": "20000"
            }
        }
    },
    "Conditions": {
        "EphemeralStorage": {
            "Fn::Equals": [
                {
                    "Ref": "PersistentStorage"
                },
                "0"
            ]
        },
        "GovCloudCondition": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
        }
    },
    "Resources": {
        "SolaceVMRRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [ "s3:GetObject" ],
                                    "Resource": {
                                        "Fn::Sub": [
                                            "arn:${Partition}:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*",
                                            {
                                                "Partition": {
                                                    "Fn::If": [
                                                        "GovCloudCondition",
                                                        "aws-us-gov",
                                                        "aws"
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "Effect": "Allow"
                                }
                            ]
                        },
                        "PolicyName": "s3-policy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "cloudformation:DescribeStackResources",
                                        "ec2:DescribeInstances",
                                        "ec2:CreateTags"
                                    ],
                                    "Resource": [
                                        "*"
                                    ],
                                    "Effect": "Allow"
                                }
                            ]
                        },
                        "PolicyName": "ec2-policy"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "logs:DescribeLogStreams"
                                    ],
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ],
                                    "Effect": "Allow"
                                }
                            ]
                        },
                        "PolicyName": "cloudwatch-policy"
                    }
                ],
                "Path": "/",
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [ "sts:AssumeRole" ],
                            "Principal": { "Service": [ "ec2.amazonaws.com" ] },
                            "Effect": "Allow"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            }
        },
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ { "Ref": "SolaceVMRRole" } ]
            }
        },
        "CloudFormationLogs": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": 7
            }
        },
        "RecoveryTestAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Trigger a recovery when instance status check fails for 3 consecutive minutes.",
                "Namespace": "AWS/EC2" ,
                "MetricName": "StatusCheckFailed_System",
                "Statistic": "Minimum",
                "Period": "60",
                "EvaluationPeriods": "3",
                "ComparisonOperator": "GreaterThanThreshold",
                "Threshold": "0",
                "AlarmActions": [ {"Fn::Join" : ["", ["arn:aws:automate:", { "Ref" : "AWS::Region" }, ":ec2:recover" ]]} ],
                "Dimensions": [{"Name": "InstanceId","Value": {"Ref": "NodeLaunchConfig"}}]
            }
        },
        "NodeLaunchConfig": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets" : {
                        "install_all" : ["install_docker",  "install_extras", "install_solace" ]
                    },
                "install_docker": {
                    "packages" : {
                        "yum" : {
                            "docker" : [],
                            "wget" : [],
                            "lvm2" : []
                        }
                    },
                    "files": {
                        "/etc/sysconfig/docker": {
                            "content": { "Fn::Join": [ "", [
                                "DAEMON_PIDFILE_TIMEOUT=10\n",
                                "OPTIONS=\"--default-ulimit nofile=1024:4096 --iptables=false --storage-driver overlay2\"\n"
                            ] ] },
                            "mode": "000444",
                            "owner": "root",
                            "group": "root"
                        }
                    },
                    "commands" : {
                        "01_add_ec2-user_to_docker_group" : {
                            "command" : "usermod -a -G docker ec2-user"
                        }
                    },
                    "services" : {
                        "sysvinit" : {
                            "docker" : {
                                "enabled" : "true",
                                "ensureRunning" : "true",
                                "files" :[ "/etc/sysconfig/docker" ]
                            }
                        }
                    }
                },
                "install_extras": {
                    "packages": {
                        "yum": {
                            "epel-release": [],
                            "jq": []
                        }
                    }
                },
                "install_solace" : {
                        "commands" : {
                        "01_create_secrets_directory" : {
                            "command" : "mkdir -p /mnt/vmr/secrets"
                        }
                        },
                        "files": {
                            "/mnt/vmr/secrets/solOSpasswd": {
                                "content": { "Fn::Join": [ "", [
                                     { "Ref" : "AdminPassword" }, "\n"
                                ] ] }
                            },
                            "/etc/init.d/solace-vmr": {
                                "source": {
                                    "Fn::Sub": [
                                        "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/scripts/init.d/solace-vmr",
                                        {
                                            "QSS3Region": {
                                                "Fn::If": [
                                                    "GovCloudCondition",
                                                    "s3-us-gov-west-1",
                                                    "s3"
                                                ]
                                            }
                                         }
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/tmp/install-solace.sh": {
                                "source": {
                                    "Fn::Sub": [
                                        "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/scripts/install-solace.sh",
                                        {
                                            "QSS3Region": {
                                                "Fn::If": [
                                                    "GovCloudCondition",
                                                    "s3-us-gov-west-1",
                                                    "s3"
                                                ]
                                            }
                                         }
                                    ]                         
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/tmp/setup-rdp.sh": {
                                "source": {
                                    "Fn::Sub": [
                                        "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/scripts/setup-rdp.sh",
                                        {
                                            "QSS3Region": {
                                                "Fn::If": [
                                                    "GovCloudCondition",
                                                    "s3-us-gov-west-1",
                                                    "s3"
                                                ]
                                            }
                                         }
                                    ]                         
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/tmp/semp_query.sh": {
                                "source": {
                                    "Fn::Sub": [
                                        "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/scripts/semp_query.sh",
                                        {
                                            "QSS3Region": {
                                                "Fn::If": [
                                                    "GovCloudCondition",
                                                    "s3-us-gov-west-1",
                                                    "s3"
                                                ]
                                            }
                                         }
                                    ]                         
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "BlockDeviceMappings": {
                    "Fn::If": [
                        "EphemeralStorage",
                        [
                            {
                                "DeviceName": {
                                    "Fn::FindInMap": [
                                        "Linux2BootDisk",
                                        "Amazon-Linux-HVM",
                                        "BootDisk"
                                    ]
                                },
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "BootDiskSize"
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            }
                        ],
                        [
                            {
                                "DeviceName": {
                                    "Fn::FindInMap": [
                                        "Linux2BootDisk",
                                        "Amazon-Linux-HVM",
                                        "BootDisk"
                                    ]
                                },
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "BootDiskSize"
                                    },
                                    "DeleteOnTermination": "False"
                                }
                            },
                            {
                                 "DeviceName": {
                                    "Fn::FindInMap": [
                                        "Linux2SpoolDisk",
                                        "Amazon-Linux-HVM",
                                        "SpoolDisk"
                                    ]
                                },
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "PersistentStorage"
                                    },
                                    "DeleteOnTermination": "False",
                                    "VolumeType": "io1",
                                    "Iops":{
                                        "Fn::FindInMap": [
                                            "IOPsMap",
                                            { "Ref": "PersistentStorage" },
                                            "IOPs"
                                        ]
                                    }
                                }                               
                            }
                        ]
                    ]
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        { "Ref": "AWS::Region" },
                        "AMZNLINUXHVM"
                    ]
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "NetworkInterfaces" : [
                    {
                        "AssociatePublicIpAddress" : true,
                        "DeleteOnTermination" : true,
                        "Description"         : "Main interface",
                        "DeviceIndex"         : "0",
                        "GroupSet"            : { "Ref": "NodeSecurityGroup" },
                        "SubnetId"            : { "Ref" : "SubnetID" }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ParentStackName"
                                    },
                                    "MessageRouter"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "AMI_SBIN=/tmp\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "\n",
                                "## Retrieve scripts to deploy Solace on the instances \n",
                                "/opt/aws/bin/cfn-init -v ",
                                "    --stack ", { "Ref": "AWS::StackName" },
                                "    --resource NodeLaunchConfig ",
                                "    --configsets install_all ",
                                "    --region ", { "Ref": "AWS::Region" },
                                "\n",
                                "cd /tmp\n",
                                "# Install Solace\n",
                                "$AMI_SBIN/install-solace.sh ",
                                "  -p /mnt/vmr/secrets/solOSpasswd",
                                "  -s ",{ "Ref": "PersistentStorage" },
                                "  -v /dev/xvdb",
                                " \n",
                                "#  Set up send RDP\n",
                                "$AMI_SBIN/setup-rdp.sh ",
                                "  -a ",{ "Ref": "ApiGatewayId" },
                                "  -s DEVELOPMENT",                                
                                "  -h send",
                                "  -p /mnt/vmr/secrets/solOSpasswd",
                                "  -r ",{ "Ref": "AWS::Region" },
                                " \n",
                                "$AMI_SBIN/setup-rdp.sh ",
                                "  -a ",{ "Ref": "ApiGatewayId" },
                                "  -s DEVELOPMENT",                                
                                "  -h receive",
                                "  -p /mnt/vmr/secrets/solOSpasswd",
                                "  -r ",{ "Ref": "AWS::Region" },
                                " \n",
                                "$AMI_SBIN/setup-rdp.sh ",
                                "  -a ",{ "Ref": "ApiGatewayId" },
                                "  -s DEVELOPMENT",                                
                                "  -h delete",
                                "  -p /mnt/vmr/secrets/solOSpasswd",
                                "  -r ",{ "Ref": "AWS::Region" },
                                " \n",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        }
    },
    "Outputs": {
        "EC2ID": {
            "Description": "Reference to created ec2 instance",
            "Value": { "Ref": "NodeLaunchConfig" },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-EC2ID"
                }
            }
        }
    }
}
