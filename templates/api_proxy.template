{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "This template creates an ApiGateway to proxy AWS resources",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
					"Label": {
						"default": "Resource Parameters"
					},
					"Parameters": [
						"ResourceType",
						"ResourceARN"
					]
				},
				{
					"Label": {
						"default": "AWS Quick Start Configuration"
					},
					"Parameters": [
						"VPCID",
						"SubnetIDs",
						"QSS3BucketName",
						"QSS3KeyPrefix"
					]
				}
			],
			"ParameterLabels": {
				"ResourceType": {
					"default": "The Type of AWS Resources this gateway will proxy"
				},
				"ResourceARN": {
					"default": "The ARN of the resource"
				},
				"SubnetIDs": {
                    "default": "Subnets to allow access to API Gateway"
                },
                "VPCID": {
                    "default": "VPC ID to access API Gateway"
                },
				"QSS3BucketName": {
					"default": "Quick Start S3 Bucket Name"
				},
				"QSS3KeyPrefix": {
					"default": "Quick Start S3 Key Prefix"
				}
			}
		}
	},
	"Parameters": {
		"ResourceType": {
			"Description": "The resource that this APIGateway will proxy",
			"ConstraintDescription": "Must be of type from list",
			"Type": "String",
			"AllowedValues": [
				"S3",
				"SQS",
				"SNS",
				"Kinesis",
				"Lambda"
			]
		},
		"ResourceARN": {
			"Description": "The AWS ARN associated with resource, example arn:sqs:myQueue",
			"ConstraintDescription": "The ARN of the resource",
			"Type": "String"
		},
		"SubnetIDs": {
            "Description": "Comma separated list of VPC subnet IDs to access API Gateway (e.g. subnet-4b8d329f,subnet-bd73afc8); VPC must exist with proper configuration for Solace cluster access",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
		"VPCID": {
            "Description": "ID of the VPC (e.g. vpc-0343606e)",
            "Type": "AWS::EC2::VPC::Id"
        },
		"QSS3BucketName": {
			"AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
			"ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
			"Default": "solace-labs",
			"Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
			"Type": "String"
		},
		"QSS3KeyPrefix": {
			"AllowedPattern": "^[0-9a-zA-Z-/]*$",
			"ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
			"Default": "solace-aws-service-integration/latest",
			"Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
			"Type": "String"
		}
	},
	"Mappings": {
		"ResourceMap": {
			"Kinesis": {
				"Title" : "Solace_binary_message->Kinesis",
				"PolicyActions": "kinesis:*"
			},
			"Lambda": {
				"Title" : "Solace_binary_message->Lambda",
				"PolicyActions": "lambda:InvokeFunction"
			},
			"S3":      {
				"Title" : "Solace_binary_message->s3",
				"PolicyActions": "s3:Put* s3:Get* s3:List*"
			},
			"SNS":     {
				"Title" : "Solace_binary_message->SNS",
				"PolicyActions": "sns:ListTopics sns:Publish"
			},
			"SQS":     {
				"Title" : "Solace_binary_message->SQS",
				"PolicyActions": "sqs:SendMessage sqs:ReceiveMessage sqs:DeleteMessage"
			}

		}
	},
	"Conditions": {
		"KinesisServiceCondition": {"Fn::Equals": [{"Ref": "ResourceType"},"Kinesis"]},
		"LambdaServiceCondition": {"Fn::Equals": [{"Ref": "ResourceType"},"Lambda"]},
		"S3ServiceCondition":      {"Fn::Equals": [{"Ref": "ResourceType"},"S3"]},
		"SNSServiceCondition":     {"Fn::Equals": [{"Ref": "ResourceType"},"SNS"]},
		"SQSServiceCondition":     {"Fn::Equals": [{"Ref": "ResourceType"},"SQS"]}
	},
	"Resources": {
		"SecurityGroupStack": {
			"Type": "AWS::CloudFormation::Stack",
			"Properties": {
				"TemplateURL": {"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/Security/proxy_securityGroup.template"},
				"Parameters": {
					"vpcId": { "Ref" :"VPCID" }
				}				
			}
		},
		"EndPointStack": {
			"Type": "AWS::CloudFormation::Stack",
			"DependsOn": ["SecurityGroupStack"],
			"Properties": {
				"TemplateURL": {"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/Security/proxy_endpoint.template"},
				"Parameters": {
					"vpcId": { "Ref" :"VPCID" },
					"subnets": {"Fn::Join": ["," , {"Ref": "SubnetIDs"}]},
					"securityGroups": {"Fn::Join": ["," , 
						[
							{"Fn::GetAtt": ["SecurityGroupStack","Outputs.SecurityGroupMember"]},
							{"Fn::GetAtt": ["SecurityGroupStack","Outputs.SecurityGroup"]}
						]
					]} 	
				}				
			}
		},
		"RoleStack": {
			"Type": "AWS::CloudFormation::Stack",
			"Properties": {
				"TemplateURL": {"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/Security/proxy_role.template"},
				"Parameters": {
					"stackName": { "Ref" :"AWS::StackName" },
					"resourceARN" : {
                        "Fn::If": ["S3ServiceCondition",
							{"Fn::Join": [ "", ["arn:aws:s3:::", {"Ref": "ResourceARN"}]]},
							{"Ref": "ResourceARN"}
						]
					},
					"actions" : {"Fn::FindInMap": ["ResourceMap", {"Ref": "ResourceType"}, "PolicyActions"]},
					"vpcId": { "Ref" :"VPCID" }
				}
			}
		},
		"KinesisStack": {
			"Type": "AWS::CloudFormation::Stack",
			"Condition": "KinesisServiceCondition",
			"DependsOn": ["RoleStack", "EndPointStack"],
			"Properties": {
				"TemplateURL": {"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/Services/kinesis_proxy.template"},
				"Parameters": {
					"RoleARN" : {"Fn::GetAtt": ["RoleStack","Outputs.ARN"]},
					"vpcId": { "Ref" :"VPCID" }
				}
			}
		},
		"LambdaStack": {
			"Type": "AWS::CloudFormation::Stack",
			"Condition": "LambdaServiceCondition",
			"DependsOn": ["RoleStack", "EndPointStack"],
			"Properties": {
				"TemplateURL": {"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/Services/resource_proxy.template"},
				"Parameters": {
					"Title": {"Fn::FindInMap": ["ResourceMap", {"Ref": "ResourceType"}, "Title"]},
					"RoleARN" : {"Fn::GetAtt": ["RoleStack","Outputs.ARN"]},
					"vpcId": { "Ref" :"VPCID" },
					"ResourceURL" : {"Fn::Join": [ "", ["arn:aws:apigateway:",
						{ "Fn::Select" : [ "3", { "Fn::Split": [":", {"Ref" : "ResourceARN"}]}]},
						":lambda:path/2015-03-31/functions/arn:aws:lambda:",
						{ "Fn::Select" : [ "3", { "Fn::Split": [":", {"Ref" : "ResourceARN"}]}]},
						":",						
						{ "Fn::Select" : [ "4", { "Fn::Split": [":", {"Ref" : "ResourceARN"}]}]},
						":function:",
						{ "Fn::Select" : [ "6", { "Fn::Split": [":", {"Ref" : "ResourceARN"}]}]},
						"/invocations"]]},
					 "JSONTemplate" : "$input.json('$')",
					 "OctelStreamTemplate" : "$input.body",
					 "DeleteTemplate" : ""
				}
			}
		},
		"S3Stack": {
			"Type": "AWS::CloudFormation::Stack",
			"Condition": "S3ServiceCondition",
			"DependsOn": ["RoleStack", "EndPointStack"],
			"Properties": {
				"TemplateURL": {"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/Services/s3_proxy.template"},
				"Parameters": {
					"RoleARN" : {"Fn::GetAtt": ["RoleStack","Outputs.ARN"]},
					"vpcId": { "Ref" :"VPCID" }
				}
			}
		},
		"SNSStack": {
			"Type": "AWS::CloudFormation::Stack",
			"Condition": "SNSServiceCondition",
			"DependsOn": ["RoleStack", "EndPointStack"],
			"Properties": {
				"TemplateURL": {"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/Services/resource_proxy.template"},
				"Parameters": {
					"Title": {"Fn::FindInMap": ["ResourceMap", {"Ref": "ResourceType"}, "Title"]},
					"RoleARN" : {"Fn::GetAtt": ["RoleStack","Outputs.ARN"]},
					"vpcId": { "Ref" :"VPCID" },
					"ResourceURL" : {"Fn::Join": [ "", ["arn:aws:apigateway:",
						{ "Fn::Select" : [ "3", { "Fn::Split": [":", {"Ref" : "ResourceARN"}]}] },
						":sns:path/",
						{ "Fn::Select" : [ "4", { "Fn::Split": [":", {"Ref" : "ResourceARN"}]}] },
					 "/",
					 { "Fn::Select" : [ "5", { "Fn::Split": [":", {"Ref" : "ResourceARN"}]}] }]]},
					 "JSONTemplate" : {"Fn::Join": ["", ["Action=Publish&TopicArn=",{"Ref" : "ResourceARN"},"&Message=$util.urlEncode($util.escapeJavaScript($input.json('$')))"]]},
					 "OctelStreamTemplate" : {"Fn::Join": ["", ["Action=Publish&TopicArn=",{"Ref" : "ResourceARN"},"&Message=$util.urlEncode($util.escapeJavaScript($input.body))"]]},
					 "DeleteTemplate" : ""
				}
			}
		},
		"SQSStack": {
			"Type": "AWS::CloudFormation::Stack",
			"Condition": "SQSServiceCondition",
			"DependsOn": ["RoleStack", "EndPointStack"],
			"Properties": {
				"TemplateURL": {"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/Services/resource_proxy.template"},
				"Parameters": {
					"Title": {"Fn::FindInMap": ["ResourceMap", {"Ref": "ResourceType"}, "Title"]},
					"RoleARN" : {"Fn::GetAtt": ["RoleStack","Outputs.ARN"]},
					"vpcId": { "Ref" :"VPCID" },
					"ResourceURL" : {"Fn::Join": [ "", ["arn:aws:apigateway:",
						{ "Fn::Select" : [ "3", { "Fn::Split": [":", {"Ref" : "ResourceARN"}]}] },
						":",
						{"Fn::Select" : [ "2", { "Fn::Split": [":", {"Ref" : "ResourceARN"}]}] },
						":path/",
						{ "Fn::Select" : [ "4", { "Fn::Split": [":", {"Ref" : "ResourceARN"}]}] },
					 "/",
					 { "Fn::Select" : [ "5", { "Fn::Split": [":", {"Ref" : "ResourceARN"}]}] }]]},
					 "JSONTemplate" : "Action=SendMessage&MessageBody=$util.urlEncode($util.escapeJavaScript($input.json('$')))",
					 "OctelStreamTemplate" : "Action=SendMessage&MessageBody=$util.urlEncode($util.escapeJavaScript($input.body))",
					 "DeleteTemplate" : "Action=DeleteMessage&ReceiptHandle=$util.urlEncode($input.body)"
				}
			}
		}	
	},
    "Outputs": {
		"APIGatewayId": {
            "Value": { 
				"Fn::If": ["KinesisServiceCondition", {"Fn::GetAtt": ["KinesisStack","Outputs.APIGatewayId"]},{
					"Fn::If": ["LambdaServiceCondition", {"Fn::GetAtt": ["LambdaStack","Outputs.APIGatewayId"]},{
						"Fn::If": ["S3ServiceCondition", {"Fn::GetAtt": ["S3Stack","Outputs.APIGatewayId"]},{
							"Fn::If": ["SNSServiceCondition", {"Fn::GetAtt": ["SNSStack","Outputs.APIGatewayId"]},{
								"Fn::If": ["SQSServiceCondition", {"Fn::GetAtt": ["SQSStack","Outputs.APIGatewayId"]},{}]
							}]
						}]
					}]
				}]},
            "Description": "API Gateway ID",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-APIGateWayID"
                }
            }			
		},
        "SecurityGroupMember": {
            "Value": {"Fn::GetAtt": ["SecurityGroupStack","Outputs.SecurityGroupMember"]},
            "Description": "API Gateway Security Group",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-SecurityGroupMember"
                }
            }
        },
        "SecurityGroup": {
            "Value":{"Fn::GetAtt": ["SecurityGroupStack","Outputs.SecurityGroup"]},
            "Description": "API Gateway Security Group",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-SecurityGroup"
                }
            }
        }
    }
}